---
  
- name: Check to see if the scan completed
  k8s_info:
    kind: Pod
    namespace: openshift-compliance
    wait: yes
    wait_sleep: 10
  
### Extraction of master Compliance Check Results and XML files
  
- name: Create directory to hold master scan results
  file:
    path: '{{ work_dir }}/{{ master_results_dir }}'
    state: directory

- name: Create a backup directory to store previous results
  file:
    path: '{{ work_dir }}/backup'
    state: directory

- name: Move previous master results to backup directory
  copy:
    src: '{{ work_dir }}/{{ master_results_dir }}/'
    dest: '{{ work_dir }}/backup'
  ignore_errors: yes

- name: Retrieve master scan results from PVC
  shell: oc get pvc -n {{ namespace}} | grep master | awk '{print $1}'
  register: master_results

- name: Create master-pv-extract pod
  k8s:
    state: present
    definition:
      apiVersion: "v1"
      kind: Pod
      metadata:
        name: master-pv-extract
        namespace: openshift-compliance
      spec:
        containers:
        - name: master-pv-extract
          image: registry.access.redhat.com/ubi8/ubi
          command: ["sleep", "3000"]
          volumeMounts:
            - mountPath: '{{ master_results_path }}'
              name: masters-scan-vol
        volumes:
        - name: masters-scan-vol
          persistentVolumeClaim:
            claimName: '{{ master_results.stdout }}'
  
- name: Wait for  master-pv-extract pod creation
  k8s_info:
    kind: Pod
    name: master-pv-extract
    namespace: openshift-compliance
    wait: yes
    wait_sleep: 10

- name: Copy XML results directory from master-pv-extract pod
  shell: oc cp master-pv-extract:/masters-scan-results '{{ work_dir }}/{{ master_results_dir }}/'
  
- name: Get compliance check results for masters
  shell: oc get ccr | grep master > '{{ work_dir }}/{{ master_results_dir }}/master_ccr.txt'
  
  
### Extraction of worker Compliance Check Results and XML files

- name: Create directory to hold worker scan results
  file:
    path: '{{ work_dir }}/{{ worker_results_dir }}'
    state: directory

- name: Move previous worker results to backup directory
  copy:
    src: '{{ work_dir }}/{{ worker_results_dir }}/'
    dest: '{{ work_dir }}/backup'
  ignore_errors: yes

- name: Retrieve worker scan results from PVC
  shell: oc get pvc -n {{ namespace }} | grep worker | awk '{print $1}'
  register: worker_results
  
- name: Create worker-pv-extract pod
  k8s:
    state: present
    definition:
      apiVersion: "v1"
      kind: Pod
      metadata:
        name: worker-pv-extract
        namespace: openshift-compliance
      spec:
        containers:
        - name: worker-pv-extract
          image: registry.access.redhat.com/ubi8/ubi
          command: ["sleep", "3000"]
          volumeMounts:
            - mountPath: '{{ worker_results_path }}'
              name: workers-scan-vol
        volumes:
        - name: workers-scan-vol
          persistentVolumeClaim:
            claimName: '{{ worker_results.stdout }}'

- name: Pause to allow worker-pv-extract pod creation
  k8s_info:
    kind: Pod
    name: worker-pv-extract
    namespace: openshift-compliance
    wait: yes
    wait_sleep: 10

- name: Copy XML results directory from worker-pv-extract pod
  shell: oc cp worker-pv-extract:/workers-scan-results '{{ work_dir }}/{{ worker_results_dir }}/'

- name: Get compliance check results for workers
  shell: oc get ccr | grep worker > '{{ work_dir }}/{{ worker_results_dir }}/worker_ccr.txt'


### Extraction of platform Compliance Check Results and XML files

- name: Create directory to hold ocp4 scan results
  file:
    path: '{{ work_dir }}/{{ ocp4_results_dir }}'
    state: directory

- name: Move previous ocp4 results to backup directory
  copy:
    src: '{{ work_dir }}/{{ ocp4_results_dir }}/'
    dest: '{{ work_dir }}/backup'
  ignore_errors: yes

- name: Retrieve ocp4 scan results from PVC
  shell: oc get pvc -n {{ namespace }} | grep ocp4 | awk '{print $1}'
  register: ocp4_results

- name: Create ocp4-pv-extract pod
  k8s:
    state: present
    definition:
      apiVersion: "v1"
      kind: Pod
      metadata:
        name: ocp4-pv-extract
        namespace: openshift-compliance
      spec:
        containers:
        - name: ocp4-pv-extract
          image: registry.access.redhat.com/ubi8/ubi
          command: ["sleep", "3000"]
          volumeMounts:
            - mountPath: '{{ ocp4_results_path }}'
              name: ocp4-scan-vol
        volumes:
        - name: ocp4-scan-vol
          persistentVolumeClaim:
            claimName: '{{ ocp4_results.stdout }}'

- name: Wait for ocp4-pv-extract pod creation
  k8s_info:
    kind: Pod
    name: ocp4-pv-extract
    namespace: openshift-compliance
    wait: yes
    wait_sleep: 10


- name: Copy XML results directory from worker-pv-extract pod
  shell: oc cp ocp4-pv-extract:/ocp4-scan-results '{{ work_dir }}/{{ ocp4_results_dir }}/'

- name: Get compliance check results for workers
  shell: oc get ccr | grep ocp4 > '{{ work_dir }}/{{ ocp4_results_dir }}/ocp4_ccr.txt'


### Clean up pv-extract pods and PVCs

- name: Delete master-pv-extract pod
  k8s:
    state: absent
    api_version: v1
    kind: Pod
    namespace: openshift-compliance
    name: master-pv-extract
    
- name: Delete worker-pv-extract pod
  k8s:
    state: absent
    api_version: v1
    kind: Pod
    namespace: openshift-compliance
    name: worker-pv-extract
  
- name: Delete ocp4-pv-extract pod
  k8s:
    state: absent
    api_version: v1
    kind: Pod
    namespace: openshift-compliance
    name: ocp4-pv-extract


- name: Delete master results PVC
  k8s:
    state: absent
    api_version: v1
    kind: PersistentVolumeClaim
    namespace: openshift-compliance
    name: '{{ master_results.stdout }}'

- name: Delete ocp4 results PVC
  k8s:
    state: absent
    api_version: v1
    kind: PersistentVolumeClaim
    namespace: openshift-compliance
    name: '{{ ocp4_results.stdout }}'
    
- name: Delete worker results PVC
  k8s:
    state: absent
    api_version: v1
    kind: PersistentVolumeClaim
    namespace: openshift-compliance
    name: '{{ worker_results.stdout }}'
  
    

 
  
